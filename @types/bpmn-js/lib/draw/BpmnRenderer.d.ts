declare function BpmnRenderer(config: any, eventBus: any, styles: any, pathMap: any, canvas: any, textRenderer: any, priority: any): void;
declare class BpmnRenderer {
    constructor(config: any, eventBus: any, styles: any, pathMap: any, canvas: any, textRenderer: any, priority: any);
    handlers: {
        'bpmn:Event': (parentGfx: any, element: any, attrs: any) => any;
        'bpmn:StartEvent': (parentGfx: any, element: any) => any;
        'bpmn:MessageEventDefinition': (parentGfx: any, element: any, isThrowing: any) => any;
        'bpmn:TimerEventDefinition': (parentGfx: any, element: any) => any;
        'bpmn:EscalationEventDefinition': (parentGfx: any, event: any, isThrowing: any) => any;
        'bpmn:ConditionalEventDefinition': (parentGfx: any, event: any) => any;
        'bpmn:LinkEventDefinition': (parentGfx: any, event: any, isThrowing: any) => any;
        'bpmn:ErrorEventDefinition': (parentGfx: any, event: any, isThrowing: any) => any;
        'bpmn:CancelEventDefinition': (parentGfx: any, event: any, isThrowing: any) => any;
        'bpmn:CompensateEventDefinition': (parentGfx: any, event: any, isThrowing: any) => any;
        'bpmn:SignalEventDefinition': (parentGfx: any, event: any, isThrowing: any) => any;
        'bpmn:MultipleEventDefinition': (parentGfx: any, event: any, isThrowing: any) => any;
        'bpmn:ParallelMultipleEventDefinition': (parentGfx: any, event: any) => any;
        'bpmn:EndEvent': (parentGfx: any, element: any) => any;
        'bpmn:TerminateEventDefinition': (parentGfx: any, element: any) => any;
        'bpmn:IntermediateEvent': (parentGfx: any, element: any) => any;
        'bpmn:IntermediateCatchEvent': (parentGfx: any, element: any) => any;
        'bpmn:IntermediateThrowEvent': (parentGfx: any, element: any) => any;
        'bpmn:Activity': (parentGfx: any, element: any, attrs: any) => any;
        'bpmn:Task': (parentGfx: any, element: any) => any;
        'bpmn:ServiceTask': (parentGfx: any, element: any) => any;
        'bpmn:UserTask': (parentGfx: any, element: any) => any;
        'bpmn:ManualTask': (parentGfx: any, element: any) => any;
        'bpmn:SendTask': (parentGfx: any, element: any) => any;
        'bpmn:ReceiveTask': (parentGfx: any, element: any) => any;
        'bpmn:ScriptTask': (parentGfx: any, element: any) => any;
        'bpmn:BusinessRuleTask': (parentGfx: any, element: any) => any;
        'bpmn:SubProcess': (parentGfx: any, element: any, attrs: any) => any;
        'bpmn:AdHocSubProcess': (parentGfx: any, element: any) => any;
        'bpmn:Transaction': (parentGfx: any, element: any) => any;
        'bpmn:CallActivity': (parentGfx: any, element: any) => any;
        'bpmn:Participant': (parentGfx: any, element: any) => any;
        'bpmn:Lane': (parentGfx: any, element: any, attrs: any) => any;
        'bpmn:InclusiveGateway': (parentGfx: any, element: any) => any;
        'bpmn:ExclusiveGateway': (parentGfx: any, element: any) => any;
        'bpmn:ComplexGateway': (parentGfx: any, element: any) => any;
        'bpmn:ParallelGateway': (parentGfx: any, element: any) => any;
        'bpmn:EventBasedGateway': (parentGfx: any, element: any) => any;
        'bpmn:Gateway': (parentGfx: any, element: any) => any;
        'bpmn:SequenceFlow': (parentGfx: any, element: any) => any;
        'bpmn:Association': (parentGfx: any, element: any, attrs: any) => any;
        'bpmn:DataInputAssociation': (parentGfx: any, element: any) => any;
        'bpmn:DataOutputAssociation': (parentGfx: any, element: any) => any;
        'bpmn:MessageFlow': (parentGfx: any, element: any) => any;
        'bpmn:DataObject': (parentGfx: any, element: any) => any;
        'bpmn:DataObjectReference': (parentGfx: any, element: any) => any;
        'bpmn:DataInput': (parentGfx: any, element: any) => any;
        'bpmn:DataOutput': (parentGfx: any, element: any) => any;
        'bpmn:DataStoreReference': (parentGfx: any, element: any) => any;
        'bpmn:BoundaryEvent': (parentGfx: any, element: any) => any;
        'bpmn:Group': (parentGfx: any, element: any) => any;
        label: (parentGfx: any, element: any) => any;
        'bpmn:TextAnnotation': (parentGfx: any, element: any) => any;
        ParticipantMultiplicityMarker: (parentGfx: any, element: any) => void;
        SubProcessMarker: (parentGfx: any, element: any) => void;
        ParallelMarker: (parentGfx: any, element: any, position: any) => void;
        SequentialMarker: (parentGfx: any, element: any, position: any) => void;
        CompensationMarker: (parentGfx: any, element: any, position: any) => void;
        LoopMarker: (parentGfx: any, element: any, position: any) => void;
        AdhocMarker: (parentGfx: any, element: any, position: any) => void;
    };
    _drawPath: (parentGfx: any, d: any, attrs: any) => any;
    canRender(element: any): boolean;
    drawShape(parentGfx: any, element: any): any;
    drawConnection(parentGfx: any, element: any): any;
    getShapePath(element: any): any;
}
declare namespace BpmnRenderer {
    const $inject: string[];
}
export default BpmnRenderer;
